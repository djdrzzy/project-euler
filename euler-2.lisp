;; Problem 2

;; Each new term in the Fibonacci sequence is generated by adding the previous
;; two terms. By starting with 1 and 2, the first 10 terms will be:

;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

;; By considering the terms in the Fibonacci sequence whose values do not exceed
;; four million, find the sum of the even-valued terms.

;; To run this solution run the function (euler-2).

;; The solution should be 4613732

(defun euler-2 ()
  (reduce #'+ 
	  (remove-if-not #'evenp 
			 (lazy-list-map #'fib 
					#'(lambda (x)
					    (< x 4000000))
					1))))

(defun fib (n)
  (labels ((fib-helper (a b n)
	     (let ((c (+ a b)))
	       (if (>= (1- n) 0)
		   (fib-helper b c (1- n))
		   c))))
    (fib-helper 0 1 n)))

;; A cool function. For each index in a list we take that index, apply an offset
;; to it and then call map-f on it. If it passes our map-check-f we add it to our
;; list we are making, increment our index and repeat. If we do not pass we just
;; return the list we have constructed.
(defun lazy-list-map (map-f map-check-f offset)
  (labels ((lazy-list-map-helper (l map-f map-check-f)
	     (let ((mapped-index (funcall map-f (+ offset (length l)))))
	       (if (funcall map-check-f mapped-index)
		   (lazy-list-map-helper (cons mapped-index l) map-f map-check-f)
		   l))))
    (reverse (lazy-list-map-helper nil map-f map-check-f))))
