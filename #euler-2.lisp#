;; Problem 2

;; Each new term in the Fibonacci sequence is generated by adding the previous
;; two terms. By starting with 1 and 2, the first 10 terms will be:

;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

;; By considering the terms in the Fibonacci sequence whose values do not exceed
;; four million, find the sum of the even-valued terms.

;; To run this solution run the function (euler-2).

;; The solution should be 4613732

(defun euler-2 ()
  (reduce #'+ 
	  (remove-if-not #'evenp 
			 (lazy-list-map #'fib #'(lambda (x)
						  (< x 4000000))))))

(defun fib (n)
  (fib-helper 0 1 n))

(defun fib-helper (a b n)
  (let ((c (+ a b)))
    (if (>= (1- n) 0)
	(fib-helper b c (1- n))
	c)))

;; A cool function. At each index in the list (index is 1
(defun lazy-list-map (map-f map-check)
  (reverse (lazy-list-map-helper nil map-f map-check)))

(defun lazy-list-map-helper (l map-f map-check)
  (let ((mapped-index (funcall map-f (1+ (length l)))))
    (if (funcall map-check mapped-index)
	(lazy-list-map-helper (cons mapped-index l) map-f map-check)
	l)))